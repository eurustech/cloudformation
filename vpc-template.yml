AWSTemplateFormatVersion: 2010-09-09
Description: >-
  my VPC, Subnets, Internet Gateway & Route Tables
Parameters:
  PublicSubnetAvailabilityZone:
    Description: Public subnet availability zone
    Type: AWS::EC2::AvailabilityZone::Name
  PublicSubnetAvailabilityZone2:
    Description: Public subnet 2 availability zone
    Type: AWS::EC2::AvailabilityZone::Name
  PrivateSubnetAvailabilityZone01:
    Description: Private subnet availability zone 1 for database
    Type: AWS::EC2::AvailabilityZone::Name
  PrivateSubnetAvailabilityZone02:
    Description: Private subnet availability zone 2 for database
    Type: AWS::EC2::AvailabilityZone::Name
  VPCIpBlock:
    Description: VPC IP block
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 192.167.0.0/16
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  PrivateSubnetIpBlock01:
    Description: Private subnet IP block 1 for database
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 192.167.1.0/24
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  PrivateSubnetIpBlock02:
    Description: Private subnet IP block 2 for database
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 192.167.2.0/24
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  PublicSubnetIpBlock01:
    Description: Public subnet IP block 01
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 192.167.3.0/24
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  PublicSubnetIpBlock02:
    Description: Public subnet IP block 02
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 192.167.4.0/24
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
Resources:
  # 1. VPC Region Start
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCIpBlock
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: my-VPC
        - Key: Developer
          Value: my
  # 1. VPC Region End
  # 2. Internet Gateway Region Start
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: my-IG
        - Key: Developer
          Value: my
  myInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  # 2. Internet Gateway Region End
  # 3. Network ACL Region Start
  # 3.1 Network Public ACL Region Start
  myPublicACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: my-Public-ACL
        - Key: Developer
          Value: my
  myPublicACLEntryInBound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref myPublicACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  myPublicACLEntryOutBound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref myPublicACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  # 3.1 Network Public ACL Region End
  # 3.2 Network Private ACL Region Start
  myPrivateACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: my-Private-ACL
        - Key: Developer
          Value: my
  myPrivate01ACLMySQLEntryInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref myPrivateACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      PortRange: 
        From: 3306
        To: 3306
      CidrBlock: !Ref PublicSubnetIpBlock01
  myPrivate01ACLMySQLEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref myPrivateACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      PortRange: #Ephemeral ports 1024--65535
        From: 1024
        To: 65535
      CidrBlock: !Ref PublicSubnetIpBlock01
  myPrivate02ACLMySQLEntryInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref myPrivateACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      PortRange: 
        From: 3306
        To: 3306
      CidrBlock: !Ref PublicSubnetIpBlock02
  myPrivate02ACLMySQLEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref myPrivateACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      PortRange: #Ephemeral ports 1024--65535
        From: 1024
        To: 65535
      CidrBlock: !Ref PublicSubnetIpBlock02
  # 3.2 Network Private ACL Region End
  # 3. Network ACL Region End
  # 4. Route Table Region Start
  myPublicRouteTable:
    Type: AWS::EC2::RouteTable    
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: my-Public-RT
        - Key: Developer
          Value: my
  myInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      GatewayId: !Ref myInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable    
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: my-Private-RT
        - Key: Developer
          Value: my
  # 4. Route Table Region End
  # 5. Subnet Region Start
  # 5.1 Private Subnet Region Start
  # 5.1.1 RDB Private Subnet Region Start
  myRDBPrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref myVPC
        CidrBlock: !Ref PrivateSubnetIpBlock01
        AvailabilityZone: !Ref PrivateSubnetAvailabilityZone01
        Tags:
        - Key: Name
          Value: my-VPC-private-subnet
        - Key: Developer
          Value: my
  myPrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myRDBPrivateSubnet01
      RouteTableId: !Ref  myPrivateRouteTable
  myRDBPrivateSubnet01NetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref myRDBPrivateSubnet01
      NetworkAclId: !Ref myPrivateACL
  # 5.1.1 RDB Private Subnet Region End
  # 5.1.2 RDB Private Subnet Region Start
  myRDBPrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref myVPC
        CidrBlock: !Ref PrivateSubnetIpBlock02
        AvailabilityZone: !Ref PrivateSubnetAvailabilityZone02
        Tags:
        - Key: Name
          Value: my-VPC-private-subnet
        - Key: Developer
          Value: my
  myRDBPrivateSubnet02NetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref myRDBPrivateSubnet02
      NetworkAclId: !Ref myPrivateACL
  # 5.1.2 RDB Private Subnet Region End
  # 5.1 Private Subnet Region End
  # 5.2 Public Subnet Region Start
  myPublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref myVPC
        CidrBlock: !Ref PublicSubnetIpBlock01
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Ref PublicSubnetAvailabilityZone
        Tags:
        - Key: Name
          Value: my-VPC-public-subnet-01
        - Key: Developer
          Value: my
  myPublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref myVPC
        CidrBlock: !Ref PublicSubnetIpBlock02
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Ref PublicSubnetAvailabilityZone2
        Tags:
        - Key: Name
          Value: my-VPC-public-subnet-02
        - Key: Developer
          Value: my
  myPublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet01
      RouteTableId: !Ref  myPublicRouteTable
  myPublicSubnet01NetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet01
      NetworkAclId: !Ref myPublicACL
  myPublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet02
      RouteTableId: !Ref  myPublicRouteTable
  myPublicSubnet02NetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet02
      NetworkAclId: !Ref myPublicACL
  # 5.2 Public Subnet Region End
  # 5. Subnet Region End
  # 6. NAT Gateway Region Start
  myElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  myNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myElasticIP.AllocationId
      SubnetId: !Ref myPublicSubnet01
  ## Adding NAT Gateway entry in private NACL
  myNATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      NatGatewayId: !Ref myNATGateway
      DestinationCidrBlock: 0.0.0.0/0
  # 6. NAT Gateway Region End
  # 7. Security Group Region Start
  myWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupName: myWebSecurityGroup
      GroupDescription: Allow ssh,http,https,tcp to client host
      SecurityGroupIngress:
      - IpProtocol: '6'
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0
      - IpProtocol: 'tcp'
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: 443
        ToPort: 443
        CidrIpv6: ::/0
      - IpProtocol: 'tcp'
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: my-Web-SG
        - Key: Developer
          Value: my
  myELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupName: myELBSecurityGroup
      GroupDescription: Allow web security group only
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0        
      SecurityGroupEgress:
        - IpProtocol: '6'
          FromPort: 80
          ToPort: 80
          DestinationSecurityGroupId: !Ref myWebSecurityGroup
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          DestinationSecurityGroupId: !Ref myWebSecurityGroup
        - IpProtocol: 'tcp'
          FromPort: 3000
          ToPort: 3000
          DestinationSecurityGroupId: !Ref myWebSecurityGroup      
      Tags:
        - Key: Name
          Value: my-LB-SG
        - Key: Developer
          Value: my
  # 7. Security Group Region End  
Outputs:
  VPCID:
    Description: VPC
    Value: !Ref myVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID
  VPCCIDR:
    Description: VPC IP Block
    Value: !Ref VPCIpBlock
  PublicSubnetAvailabilityZone:
    Description: Public AZ
    Value: !Ref PublicSubnetAvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetAZ
  PublicSubnetAvailabilityZone2:
    Description: Public AZ
    Value: !Ref PublicSubnetAvailabilityZone2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetAZ2
  PublicSubnetIpBlock01:
    Description: Public Subnet IP Block 01
    Value: !Ref PublicSubnetIpBlock01
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetIpBlock01
  PublicSubnetIpBlock02:
    Description: Public Subnet IP Block 02
    Value: !Ref PublicSubnetIpBlock02
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetIpBlock02
  PublicRouteTable:
    Description: Public Route Table
    Value: !Ref myPublicRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PublicRouteTable
  PublicACL:
    Description: Public ACL
    Value: !Ref myPublicACL
    Export:
      Name: !Sub ${AWS::StackName}-PublicACL
  PublicSubnet01:
    Description: Public Subnet 01
    Value: !Ref myPublicSubnet01
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet01
  PublicSubnet02:
    Description: Public Subnet 02
    Value: !Ref myPublicSubnet02
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet02
  PrivateSubnetAvailabilityZone01:
    Description: Private AZ 01
    Value: !Ref PrivateSubnetAvailabilityZone01
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetAvailabilityZone01
  PrivateSubnetAvailabilityZone02:
    Description: Private AZ 02
    Value: !Ref PrivateSubnetAvailabilityZone02
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetAvailabilityZone02
  PrivateRouteTable:
    Description: Private Route Table
    Value: !Ref myPrivateRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTable
  PrivateACL:
    Description: Private ACL
    Value: !Ref myPrivateACL
    Export:
      Name: !Sub ${AWS::StackName}-PrivateACL
  PrivateSubnetIpBlock01:
    Description: Private Subnet IP Block 01
    Value: !Ref PrivateSubnetIpBlock01
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetIpBlock01
  PrivateSubnetIpBlock02:
    Description: Private Subnet IP Block 02
    Value: !Ref PrivateSubnetIpBlock02
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetIpBlock02
  PrivateSubnet01:
    Description: Private Subnet 01
    Value: !Ref myRDBPrivateSubnet01
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet01
  PrivateSubnet02:
    Description: Private Subnet 02
    Value: !Ref myRDBPrivateSubnet02
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet02
  ElasticIP:
    Description: Elastic IP
    Value: !Ref myElasticIP
    Export:
      Name: !Sub ${AWS::StackName}-ElasticIP
  NatGateway:
    Description: NatGateway
    Value: !Ref myNATGateway
    Export:
      Name: !Sub ${AWS::StackName}-NatGateway
  myWebSecurityGroup:
    Description: WebSG
    Value: !Ref myWebSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-myWebSecurityGroup
  ELBSecurityGroup:
    Description: ELBSG
    Value: !Ref myELBSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ELBSecurityGroup

#CidrBlock: !Select [ 0, !Cidr [ !GetAtt myvpc.CidrBlock, 1, 8 ]]